========================================================================
Technical Design for the Databases
========================================================================

Technical design for the SETL database and the local SQLite database
used created by SETLyze.

.. _db-access:

SETLyze Database (Microsoft Access)
===================================

.. _db-pg:

SETLyze Database (PostgreSQL)
===================================

.. _db-pg-setl_localities:

setl_localities
---------------

::

	CREATE TABLE setl_localities
	 (
		loc_id				SERIAL,
		loc_name			VARCHAR(100) NOT NULL UNIQUE,
		loc_nr				INTEGER,
		loc_coordinates		VARCHAR(100),
		loc_description		VARCHAR(300),

		CONSTRAINT loc_id_pk PRIMARY KEY (loc_id)
	);

.. _db-pg-setl_species:

setl_species
---------------

::

	CREATE TABLE setl_species
	 (
		spe_id					SERIAL,
		spe_name_venacular		VARCHAR(100) UNIQUE,
		spe_name_latin			VARCHAR(100) NOT NULL UNIQUE,
		spe_invasive_in_nl		BOOLEAN,
		spe_description			VARCHAR(300),
		spe_remarks				VARCHAR(160),
		spe_picture				OID,

		CONSTRAINT spe_id_pk PRIMARY KEY (spe_id)
	);

.. _db-pg-setl_plates:

setl_plates
---------------

::

	CREATE TABLE setl_plates
	 (
		pla_id					SERIAL,
		pla_loc_id				INTEGER NOT NULL,
		pla_setl_coordinator	VARCHAR(100),
		pla_nr					VARCHAR(100),
		pla_deployment_date		TIMESTAMP,
		pla_retrieval_date		TIMESTAMP,
		pla_water_temperature	VARCHAR(100),
		pla_salinity			VARCHAR(100),
		pla_visibility			VARCHAR(100),
		pla_remarks				VARCHAR(300),

		CONSTRAINT pla_id_pk PRIMARY KEY (pla_id),
		CONSTRAINT pla_loc_id_fk FOREIGN KEY (pla_loc_id)
			REFERENCES setl_localities (loc_id)
			ON DELETE NO ACTION
			ON UPDATE NO ACTION
	);

.. _db-pg-setl_records:

setl_records
---------------

::

	CREATE TABLE setl_records
	 (
		rec_id				SERIAL,
		rec_pla_id			INTEGER NOT NULL,
		rec_spe_id			INTEGER NOT NULL,
		rec_unknown			BOOLEAN,
		rec_o				BOOLEAN,
		rec_r				BOOLEAN,
		rec_c				BOOLEAN,
		rec_a				BOOLEAN,
		rec_e				BOOLEAN,
		rec_sur_unknown		BOOLEAN,
		rec_sur1			BOOLEAN,
		rec_sur2			BOOLEAN,
		rec_sur3			BOOLEAN,
		rec_sur4			BOOLEAN,
		rec_sur5			BOOLEAN,
		rec_sur6			BOOLEAN,
		rec_sur7			BOOLEAN,
		rec_sur8			BOOLEAN,
		rec_sur9			BOOLEAN,
		rec_sur10			BOOLEAN,
		rec_sur11			BOOLEAN,
		rec_sur12			BOOLEAN,
		rec_sur13			BOOLEAN,
		rec_sur14			BOOLEAN,
		rec_sur15			BOOLEAN,
		rec_sur16			BOOLEAN,
		rec_sur17			BOOLEAN,
		rec_sur18			BOOLEAN,
		rec_sur19			BOOLEAN,
		rec_sur20			BOOLEAN,
		rec_sur21			BOOLEAN,
		rec_sur22			BOOLEAN,
		rec_sur23			BOOLEAN,
		rec_sur24			BOOLEAN,
		rec_sur25			BOOLEAN,
		rec_1st				BOOLEAN,
		rec_2nd				BOOLEAN,
		rec_v				BOOLEAN,
		rec_photo_nrs		VARCHAR(100),
		rec_remarks			VARCHAR(100),

		CONSTRAINT rec_id_pk PRIMARY KEY (rec_id),
		CONSTRAINT rec_pla_id_fk FOREIGN KEY (rec_pla_id)
			REFERENCES setl_plates (pla_id)
			ON DELETE NO ACTION
			ON UPDATE NO ACTION,
		CONSTRAINT rec_spe_id_fk FOREIGN KEY (rec_spe_id)
			REFERENCES setl_species (spe_id)
			ON DELETE NO ACTION
			ON UPDATE NO ACTION
	);

.. _db-local:

Local SQLite Database for SETLyze
===================================

The local database is created by :meth:`setlyze.database.MakeLocalDB.create_new_db`.

.. _db-local-info:

info
---------------

::

	CREATE TABLE info (
		id INTEGER PRIMARY KEY,
		name VARCHAR,
		value VARCHAR
	)

.. _db-local-localities:

localities
---------------

::

	# Design Part: 2.4
	CREATE TABLE localities (
		loc_id INTEGER PRIMARY KEY,
		loc_name VARCHAR,
		loc_nr VARCHAR,
		loc_coordinates VARCHAR,
		loc_description VARCHAR
	)

.. _db-local-species:

species
---------------

::

	# Design Part: 2.3
	CREATE TABLE species (
		spe_id INTEGER PRIMARY KEY,
		spe_name_venacular VARCHAR,
		spe_name_latin VARCHAR,
		spe_invasive_in_nl INTEGER,
		spe_description VARCHAR,
		spe_remarks VARCHAR
	)

.. _db-local-plates:

plates
---------------

::

	# Design Part: 2.16
	CREATE TABLE plates (
		pla_id INTEGER PRIMARY KEY,
		pla_loc_id INTEGER,
		pla_setl_coordinator VARCHAR,
		pla_nr VARCHAR,
		pla_deployment_date TEXT,
		pla_retrieval_date TEXT,
		pla_water_temperature VARCHAR,
		pla_salinity VARCHAR,
		pla_visibility VARCHAR,
		pla_remarks VARCHAR
	)

.. _db-local-records:

records
---------------

::

	# Design Part: 2.5
	CREATE TABLE records (
		rec_id INTEGER PRIMARY KEY,
		rec_pla_id INTEGER,
		rec_spe_id INTEGER,
		rec_unknown INTEGER,
		rec_o INTEGER,
		rec_r INTEGER,
		rec_c INTEGER,
		rec_a INTEGER,
		rec_e INTEGER,
		rec_sur_unknown INTEGER,
		rec_sur1 INTEGER,
		rec_sur2 INTEGER,
		rec_sur3 INTEGER,
		rec_sur4 INTEGER,
		rec_sur5 INTEGER,
		rec_sur6 INTEGER,
		rec_sur7 INTEGER,
		rec_sur8 INTEGER,
		rec_sur9 INTEGER,
		rec_sur10 INTEGER,
		rec_sur11 INTEGER,
		rec_sur12 INTEGER,
		rec_sur13 INTEGER,
		rec_sur14 INTEGER,
		rec_sur15 INTEGER,
		rec_sur16 INTEGER,
		rec_sur17 INTEGER,
		rec_sur18 INTEGER,
		rec_sur19 INTEGER,
		rec_sur20 INTEGER,
		rec_sur21 INTEGER,
		rec_sur22 INTEGER,
		rec_sur23 INTEGER,
		rec_sur24 INTEGER,
		rec_sur25 INTEGER,
		rec_1st INTEGER,
		rec_2nd INTEGER,
		rec_v INTEGER
	)

.. _db-local-species_spots_1:

species_spots_1
---------------

::

	# Note that rec_pla_id doesn't have to be unique, so we're
	# creating a separate primary key "id".
	# Design Part: 2.9.1
	# Design Part: 2.10.1
	# Design Part: 2.11.1
	CREATE TABLE species_spots_1 (
		id INTEGER PRIMARY KEY,
		rec_pla_id INTEGER,
		rec_sur1 INTEGER,
		rec_sur2 INTEGER,
		rec_sur3 INTEGER,
		rec_sur4 INTEGER,
		rec_sur5 INTEGER,
		rec_sur6 INTEGER,
		rec_sur7 INTEGER,
		rec_sur8 INTEGER,
		rec_sur9 INTEGER,
		rec_sur10 INTEGER,
		rec_sur11 INTEGER,
		rec_sur12 INTEGER,
		rec_sur13 INTEGER,
		rec_sur14 INTEGER,
		rec_sur15 INTEGER,
		rec_sur16 INTEGER,
		rec_sur17 INTEGER,
		rec_sur18 INTEGER,
		rec_sur19 INTEGER,
		rec_sur20 INTEGER,
		rec_sur21 INTEGER,
		rec_sur22 INTEGER,
		rec_sur23 INTEGER,
		rec_sur24 INTEGER,
		rec_sur25 INTEGER
	)

.. _db-local-species_spots_2:

species_spots_2
---------------

::

	# Note that rec_pla_id doesn't have to be unique, so we're
	# creating a separate unique key "id".
	# Design Part: 2.9.2
	# Design Part: 2.10.2
	# Design Part: 2.11.2
	CREATE TABLE species_spots_2 (
		id INTEGER PRIMARY KEY,
		rec_pla_id INTEGER,
		rec_sur1 INTEGER,
		rec_sur2 INTEGER,
		rec_sur3 INTEGER,
		rec_sur4 INTEGER,
		rec_sur5 INTEGER,
		rec_sur6 INTEGER,
		rec_sur7 INTEGER,
		rec_sur8 INTEGER,
		rec_sur9 INTEGER,
		rec_sur10 INTEGER,
		rec_sur11 INTEGER,
		rec_sur12 INTEGER,
		rec_sur13 INTEGER,
		rec_sur14 INTEGER,
		rec_sur15 INTEGER,
		rec_sur16 INTEGER,
		rec_sur17 INTEGER,
		rec_sur18 INTEGER,
		rec_sur19 INTEGER,
		rec_sur20 INTEGER,
		rec_sur21 INTEGER,
		rec_sur22 INTEGER,
		rec_sur23 INTEGER,
		rec_sur24 INTEGER,
		rec_sur25 INTEGER
	)

.. _db-local-spot_distances:

spot_distances
---------------

::

	# Create the table that will contain all the pre-calculated
	# spot distances.
	# Design Part: 2.23
	CREATE TABLE spot_distances (
		id INTEGER PRIMARY KEY,
		delta_x INTEGER,
		delta_y INTEGER,
		distance REAL
	)

.. _db-local-spot_distances_observed:

spot_distances_observed
-----------------------

::

	# The table for the found spot distances.
	# Design Part: 2.12
	CREATE TABLE spot_distances_observed (
		id INTEGER PRIMARY KEY,
		rec_pla_id INTEGER,
		distance REAL
	)

.. _db-local-spot_distances_expected:

spot_distances_expected
-----------------------

::

	# The table for the expected spot distances.
	# Design Part: 2.13
	CREATE TABLE spot_distances_expected (
		id INTEGER PRIMARY KEY,
		rec_pla_id INTEGER,
		distance REAL
	)

.. _db-local-plate_spot_totals:

plate_spot_totals
-----------------

::

	# The table for the total of spots per plate in the distance
	# tables.
	# Design Part: 2.39
	CREATE TABLE plate_spot_totals (
		pla_id INTEGER PRIMARY KEY,
		n_spots_a INTEGER,
		n_spots_b INTEGER
	)
