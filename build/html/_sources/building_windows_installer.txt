.. _building-windows-installer:

:Author: Serrano Pereira
:Date: |today|

==========================================
Building the Windows installer for SETLyze
==========================================

SETLyze should be as easy as possible to install on Windows machines and
user's shouldn't worry about downloading and installing the pre-requisites.
Thus a Windows installer which installs SETLyze along with
all its pre-requisites is required. This document describes how to create
the Windows installer for SETLyze using NSIS (Nullsoft Scriptable Install
System), a professional open source system to create Windows installers.

Purpose
=======

The purpose of this document is to give instructions on how to create the
Windows installer. This document is intended for the developers of SETLyze.
New developers will want to know how the Windows installer was created, so
this document was created for their convenience.

.. figure:: windows_installer.png
   :scale: 100 %
   :alt: Windows installer for SETLyze.
   :align: center

   Windows installer for SETLyze

Getting Started
===============

You'll need a Windows machine (preferably Windows XP or higher) to build the
installer. Once you have that, read on to the next sections.

Preparing your Windows environment
----------------------------------

Before you can start building the installer, we need to make some preparations.
You first need to make sure that SETLyze runs flawlesly on your Windows machine.
Let's try to get SETLyze running using only the source package. Do not use the
Windows installer to get SETLyze running on your system.

To start off, download and install all of SETLyze's pre-requisites on the
Windows machine. You'll need to download and install the tools in the order
of this list below. Well actually the order doesn't matter, but the Python
modules (marked with an asterisk) need to be installed *after* Python itself
is installed. It is important that you get the right versions as well.
If no version number is given in the list below, than it means you can get the
latest version. The tools marked with an asterisk (*) are Python modules,
meaning they are available for different versions of Python. Since we're using
Python 2.6.x, it is required that you download the versions for Python 2.6.
Look at the suffix of the installer filenames, they should end with "-py2.6.exe".
Download only 32bit versions of the tools below. The 32bit installers often
have "win32" or "x86" (not "x86-64") in the filename.

#. `Python <http://www.python.org/download/releases/2.6.6/>`_ (>=2.6 & <2.7)
#. `GTK2 Runtime <http://gtk-win.sourceforge.net/home/index.php/Downloads>`_ (>=2.22)
#. `R <http://cran.xl-mirror.nl/bin/windows/base/old/2.9.1/>`_ (=2.9.1)
#. `PyGTK <http://ftp.gnome.org/pub/GNOME/binaries/win32/pygtk/>`_ (>=2.22) *
#. `PyCairo <http://ftp.gnome.org/pub/GNOME/binaries/win32/pycairo/>`_ (>=1.8.6) *
#. `PyGObject <http://ftp.gnome.org/pub/GNOME/binaries/win32/pygobject/>`_ (>=2.26) *
#. `setuptools <http://pypi.python.org/pypi/setuptools#files>`_ *
#. `RPy <http://sourceforge.net/projects/rpy/files/rpy/>`_ (>=1.0.3) *
#. `Python Win32 Extensions <http://sourceforge.net/projects/pywin32/files/pywin32/>`_ (>=214) *

You might wonder why Python 2.6, and not the latest version, Python 3. The
reason we're using an older version is because of the Python modules SETLyze
requires. Most are only available for Python 2.6 and Python 2.7. There's a
good chance that SETLyze runs on Python 2.7 as well, but for now Python 2.6 is
sufficient.

Also notice that we are specifically using R version 2.9.1. This is because
the RPy module must correspond to the version of R and Python you have
installed. The latest version of RPy at the time of writing this is version
1.0.3, which has the filename ``rpy-1.0.3-R-2.9.0-R-2.9.1-win32-py2.6.exe``.
This means it requires R versions 2.9.0 through 2.9.1. There is also RPy2, a
redesign and rewrite of RPy. During the development of the initial version
of SETLyze, it was too hard to get RPy2 working well on Windows, which is why
was decided to use the older but stable RPy. It is possible to migrate to RPy2
and newer versions of R, but this requires changes in the source code of
SETLyze, as RPy2 works slightly different.

Running and Testing SETLyze
---------------------------

Now that we have installed all of SETLyze's pre-requisites, we can try to
run SETLyze. First obtain SETLyze's source package. The source package is
called "setlyze-x.x.tar.gz" where "x.x" is the version number. You can use
`7-Zip <http://www.7-zip.org/>`_ to unpack the contents of the source package.
This should yield a new folder named ``setlyze-x.x``. This folder contains
SETLyze's source code. Run "setlyze.pyw" and see if it works. You should
rename it to "setlyze.py" first so you can see all error/warning/info
messages returned by SETLyze (as an alternative you can also run "setlyze.pyw"
from a DOS window). If you've thoroughly tested SETLyze and found no problems
or error messages, you can continue with the next step. But don't forget to
rename the executable back to "setlyze.pyw".

Preparing the Distribution Folder
---------------------------------

A developer package for SETLyze is available as a separate download. This
package was created for the developer. It contains the source files for the
Sphinx documentation and scripts used to build the Windows installer. Use
7-Zip to unpack the content of the package. This should yield a new folder
called "developer_package". This folder contains the following files and
directories: ::

    developer_package/
    |-- dependencies
    |-- head
    |   |-- icon.ico
    |   `-- setup-win.py
    |-- sdist
    |-- setlyze_setup_modern.nsi
    `-- sphinx-docs
        |-- make.bat
        |-- Makefile
        `-- source

Basically, this package, along with SETLyze's source package is all you need
to continue the development of SETLyze. I shall now explain each of the files
and directories present in the developer package.

dependencies
    This folder is for Windows installers of some of SETLyze's pre-requisites that
    will be incorporated in SETLyze's Windows installer. This folder should
    just contain the installer for R. Later will be clear why not all of
    SETLyze's pre-requisites are put here.

head
    This folder should contain the contents of SETLyze's source package.
    Remember the folder ``setlyze-x.x`` we got after unpacking the source
    package? The contents of that folder should go into the ``head`` folder.

icon.ico
    This is the icon used for the Windows installer and for the Windows
    executable of SETLyze.

setup-win.py
    This script is used to build the Windows executable for SETLyze. This
    script uses py2exe for that. This script is *not* intended for installing
    SETLyze (opposed to "setup.py" in the source package).

sdist
    This folder should contains SETLyze's source package. So you should
    put "setlyze-x.x.tar.gz" into this folder. For your interest, "sdist"
    stands for "source distribution". We also want to distribute SETLyze's
    source code with the Windows installer.

setlyze_setup_modern.nsi
    This is the NSIS script we will use to build SETLyze's Windows installer.
    This script is a regular text file. Go ahead and open it in a text editor
    (e.g. Notepad++). This script contains all the information required for
    building the Windows installer.

sphinx-docs
    This folder contains the source of the Sphinx documentation for SETLyze.
    This folder is all you need to work on SETLyze's documentation. The
    subfolder "source" contains the source files of the documentation. The
    source files end with the extension ".rst". You can edit these with a text
    editor. After editing the source files, you can use the make files
    ("Makefile" on Linux, "make.bat" on Windows) to generate the actual
    documentation. Refer to the `Sphinx documentation <http://sphinx.pocoo.org/contents.html>`_
    for instructions.

Let's prepare the developer package folder. Follow these steps:

1. Copy the Windows installer for R 2.9.1 in the ``dependencies`` folder. This
   installer is called "R-2.9.1-win32.exe".
2. Copy SETLyze's source files in the ``head`` folder. This means, extract
   "setlyze-x.x.tar.gz" and copy the contents of the resulting ``setlyze-x.x``
   folder into the ``head`` folder.

At this point the ``sdist`` folder is still empty. This folder should contain
SETLyze's source package ("setlyze-x.x.tar.gz"). So you could just place
"setlyze-x.x.tar.gz" into that folder. But when the source code for SETLyze has
changed, you'll want to create a new source package. The next paragraph explains
how to create the source package.

From now on, well need to start using DOS. The standard DOS console in Windows
is very annoying to work with. So I highly recommend you to install `Console2
<http://sourceforge.net/projects/console/>`_ and use that instead. Open up a
DOS window and cd to the ``head`` folder. The DOS command for this looks
something like this: ::

    cd "C:\Documents and Settings\Serrano\My Documents\developer_package\head"

Of course you need replace the path with the correct path in your case.
Now list all files in that folder by typing ``dir``. Remember that this is the
folder to which you copied SETLyze source files. You should see a file called
"setup.py". This script can do lots of great stuff, and one of them is creating
a source distribution (see `An Introduction to Distutils <http://docs.python.org/distutils/introduction.html>`_).
To create the source package, type the following command from the DOS window: ::

    python setup.py sdist

.. note::

   Running Python from the command-line (or DOS) requires that you have Python
   in your PATH environment variable. Python is not added to PATH by default. If
   the above command gives you a message like:

   "'python' is not recognized as an internal or external command, operable
   program or batch file."

   then you need to make sure that your computer knows where to find the
   Python interpreter. To do this you will have to modify a setting called
   PATH, which is a list of directories where Windows will look for programs.

   The `Python on Windows FAQ <http://docs.python.org/faq/windows.html>`_
   explains how to do this. Search for "PATH environment variable" on that page
   (Ctrl+F, type "PATH environment variable", hit Enter).

If all goes well, you should see a new folder called ``dist`` in the ``head``
folder. Open this folder in Windows Explorer. And voila, you should see a file
called "setlyze-x.x.zip". This is your new source package. Check out the
contents of the .zip and check if all files are present. The "setup.py" together
with the "MANIFEST.in" file define which files are put in the source package
(see `Creating a Source Distribution <http://docs.python.org/distutils/sourcedist.html>`_).
Do note that the source package now has the extension .zip instead of .tar.gz.
This is because .zip is the default for Windows, and .tar.gz is the default for
Linux. You'll need to change this in the NSIS script ("setlyze_setup_modern.nsi")
later.

Now that you've created the source package, you can move it to the ``sdist`` folder.
The ``head/dist/`` folder needs to be empty from now on, so make sure that it's
empty before we continue. You can even remove that folder if you like.

Building the Windows Executable for SETLyze
-------------------------------------------

The next step is to create a Windows executable for SETLyze. At this point,
one can start SETLyze by running "head/setlyze.pyw". So "setlyze.pyw" is the
executable for SETLyze, but it is a regular Python script, and one needs to
have Python and all other pre-requisites installed to run the script. So before
creating the installer, we're going to create a Windows executable
("setlyze.exe") which does *not* require users to have Python and all
pre-requisites installed. For this purpose we're going to use `py2exe <http://www.py2exe.org/>`_.
Download the latest py2exe for Python 2.6 from `here <http://sourceforge.net/projects/py2exe/files/>`_
and install it.

Once you have py2exe installed, building the Windows executable is a breeze
with the provided "head/setup-win.py". Open up your DOS window and run the
following command: ::

    python setup-win.py py2exe

This should again create the folder ``head\dist\``. Open it in Windows Explorer.
You should now see a whole bunch of files, including "setlyze.exe".

Go ahead and see if it runs. Double clicking "setlyze.exe" should open up SETLyze's
main window. You might notice something different though. For example, the
windows look really ugly. Remember when I explained that this Windows executable
doesn't need to have Python etc. installed? The executable is now actually using
it's own copy of Python ("python26.dll"), GTK+ ("libgtk-win32-2.0-0.dll"), and
all the other stuff it requires (hence the whole bunch of files). But GTK+
requires some extra files to make the windows look nice (py2exe doesn't
include these files automatically). So we need to manually copy these files to
the ``head\dist\`` folder.

Manually copy the following folders to the ``head\dist\`` folder:

* ``C:\Program Files\GTK2-Runtime\etc\``
* ``C:\Program Files\GTK2-Runtime\lib\``
* ``C:\Program Files\GTK2-Runtime\share\``

Again run "setlyze.exe". SETLyze's windows should now look like a native
Windows application, no more ugly windows. But we are not done yet. Try to
use one of SETLyze Help buttons. You'll notice that it doesn't work. This is
because it's looking for the documentation files in the ``head\dist\`` folder.
This folder doesn't exist yet. The "setup-win.py" doesn't automatically copy the
``head\setlyze\docs\`` folder to the ``head\dist\`` folder. This is not yet
built into the "setup-win.py" script, so you'll have to copy it manually.

Copy the folder ``head\setlyze\docs\`` to the ``head\dist\`` folder. The contents
of ``head\setlyze\docs\`` were copied from ``developer_package\sphinx-docs\build\html\``.
The "html" folder contains the built HTML documentation for SETLyze. So in the
future, after you've updated the documentation, you should copy the folder
``developer_package\sphinx-docs\build\html\`` to ``head\dist\`` and rename
``head\dist\`` to ``head\docs\``. Again try one of SETLyze's Help buttons. The
help contents should now pop up in your browser.

At this point, the ``head\dist\`` folder contains almost all files required to
run SETLyze. I say almost, because one still needs to have R installed to
run "setlyze.exe". But we'll get to that later. Check, and double check that
"setlyze.exe" work the way it should. The contents of your "developer_package"
folder should now look like a follows. Verify that your directory structure looks
the same. ::

    (For the sake of simplicity, this tree only shows the important files and folders)

    developer_package/
    |-- dependencies
    |   `-- R-2.9.1-win32.exe
    |-- head
    |   |-- COPYING
    |   |-- dist
    |   |   |-- COPYING
    |   |   |-- etc
    |   |   |-- icon.ico
    |   |   |-- images
    |   |   |-- lib
    |   |   |-- README
    |   |   |-- setlyze.exe
    |   |   |-- share
    |   |   |-- test-data
    |   |   |-- tests
    |   |   |-- docs
    |   |   `-- ...
    |   |-- icon.ico
    |   |-- INSTALL
    |   |-- MANIFEST.in
    |   |-- README
    |   |-- setlyze
    |   |-- setlyze.pyw
    |   |-- setup.py
    |   |-- setup-win.py
    |   |-- test-data
    |   `-- tests
    |-- sdist
    |   `-- setlyze-0.1.zip
    |-- setlyze_setup_modern.nsi
    `-- sphinx-docs


Building the Windows Installer
==============================

Finally, we can start creating the Windows installer for SETLyze. The folder
structure shown above is very important, because the NSIS script
("setlyze_setup_modern.nsi") takes files from several of the folders shown
above, and puts them in a single setup.exe. The files and folders it uses are
as follows: ::

    developer_package/
    |-- dependencies
    |   `-- R-2.9.1-win32.exe
    |-- head
    |   |-- COPYING
    |   `-- dist
    |       |-- COPYING
    |       |-- etc
    |       |-- icon.ico
    |       |-- images
    |       |-- lib
    |       |-- README
    |       |-- setlyze.exe
    |       |-- share
    |       |-- test-data
    |       |-- tests
    |       |-- docs
    |       `-- ...
    `-- sdist
        `-- setlyze-0.1.zip

Open "setlyze_setup_modern.nsi" in a text editor (e.g. Notepad++) and see if
you can find the directives that load these files (hint: search "File"). You
do not need to understand everything what's in the NSIS script right now.
You just need to be able to edit it. All directives need to be correct, or else
building the installer will fail. For example, if the NSIS script looks for
a file ``sdist\setlyze-${PRODUCT_VERSION}.tar.gz``, but your source package
has the extension .zip, then you need to edit the NSIS script and change
that line to ``sdist\setlyze-${PRODUCT_VERSION}.zip`` so it can find the file.

Once all files are in place, it's time to compile the NSIS script. Compiling
means that we will build the actual installer from the NSIS script. You'll first
need to `download <http://nsis.sourceforge.net/>`_ and install NSIS (Nullsoft Scriptable Install System).

Once NSIS is installed, you can build the Windows installer by simply
right-clicking "setlyze_setup_modern.nsi" and choosing "Compile NSIS Script".
Give NSIS a moment to process the script. If the script is correct, it should
produce the Windows installer in the same folder, called something like
"setlyze-0.1-bundle-win32.exe".

Last, but not least, it's time to test the installer. You should do this on a
*clean* installation of Windows. Meaning you should test this on a Windows
machine with nothing else installed. An easy way to do this is to install
Windows on a virtual machine (e.g. VirtualBox) and test the installer right
after completing the installation of Windows.

